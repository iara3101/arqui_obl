generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
}

enum OpportunityStage {
  PREPARACION
  PRESENTACION
  NEGOCIACION
  VENTA
  NO_VENTA
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users         User[]
  apiKeys       ApiKey[]
  accounts      Account[]
  contacts      Contact[]
  opportunities Opportunity[]
  stageChanges  StageChange[]
  attachments   Attachment[]

  @@map("companies")
}

model User {
  id                  String    @id @default(cuid())
  companyId           String    @map("company_id")
  email               String
  passwordHash        String    @map("password_hash")
  role                UserRole  @default(MEMBER)
  forcePasswordReset  Boolean   @default(true) @map("force_password_reset")
  invitationToken     String?   @map("invitation_token")
  invitationExpiresAt DateTime? @map("invitation_expires_at")
  lastLoginAt         DateTime? @map("last_login_at")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  company        Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdApiKeys ApiKey[]      @relation("ApiKeyCreatedBy")
  stageChanges   StageChange[] @relation("StageChangeChangedBy")
  attachments    Attachment[]  @relation("AttachmentUploadedBy")
  opportunities  Opportunity[] @relation("OpportunityOwner")

  @@unique([companyId, email])
  @@index([companyId])
  @@map("users")
}

model ApiKey {
  id          String    @id @default(cuid())
  companyId   String    @map("company_id")
  name        String
  jti         String
  hash        String
  prefix      String
  lastFour    String    @map("last_four")
  createdById String?   @map("created_by_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  revokedAt   DateTime? @map("revoked_at")
  expiresAt   DateTime? @map("expires_at")

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy User?   @relation("ApiKeyCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  @@unique([companyId, name])
  @@unique([companyId, jti])
  @@index([companyId])
  @@map("api_keys")
}

model Account {
  id          String   @id @default(cuid())
  companyId   String   @map("company_id")
  name        String
  description String?  @db.Text
  website     String?
  industry    String?
  phone       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contacts      Contact[]
  opportunities Opportunity[]

  @@unique([companyId, name])
  @@index([companyId])
  @@map("accounts")
}

model Contact {
  id        String   @id @default(cuid())
  companyId String   @map("company_id")
  accountId String   @map("account_id")
  firstName String   @map("first_name")
  lastName  String?  @map("last_name")
  email     String?
  phone     String?
  title     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@index([companyId])
  @@map("contacts")
}

model Opportunity {
  id              String           @id @default(cuid())
  companyId       String           @map("company_id")
  accountId       String           @map("account_id")
  ownerId         String?          @map("owner_id")
  title           String
  description     String?          @db.Text
  amount          Decimal          @db.Decimal(12, 2)
  stage           OpportunityStage @default(PREPARACION)
  probability     Int?
  expectedCloseAt DateTime?        @map("expected_close_at")
  closedAt        DateTime?        @map("closed_at")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  account      Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  owner        User?         @relation("OpportunityOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  stageChanges StageChange[]
  attachments  Attachment[]

  @@index([companyId])
  @@index([companyId, stage])
  @@index([accountId])
  @@map("opportunities")
}

model StageChange {
  id            String            @id @default(cuid())
  companyId     String            @map("company_id")
  opportunityId String            @map("opportunity_id")
  oldStage      OpportunityStage? @map("old_stage")
  newStage      OpportunityStage  @map("new_stage")
  reason        String?           @db.Text
  changedById   String?           @map("changed_by_id")
  changedAt     DateTime          @default(now()) @map("changed_at")

  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  opportunity Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  changedBy   User?       @relation("StageChangeChangedBy", fields: [changedById], references: [id], onDelete: SetNull)

  @@index([companyId])
  @@index([companyId, newStage])
  @@index([opportunityId])
  @@map("stage_changes")
}

model Attachment {
  id            String   @id @default(cuid())
  companyId     String   @map("company_id")
  opportunityId String   @map("opportunity_id")
  filename      String
  contentType   String   @map("content_type")
  size          Int
  storageKey    String   @map("storage_key")
  uploadedById  String?  @map("uploaded_by_id")
  uploadedAt    DateTime @default(now()) @map("uploaded_at")

  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  opportunity Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  uploadedBy  User?       @relation("AttachmentUploadedBy", fields: [uploadedById], references: [id], onDelete: SetNull)

  @@index([companyId])
  @@index([opportunityId])
  @@map("attachments")
}
